function [xk1] = trueDynamics(xk, uk)
%% Discrete-time linear dynamic model 
% 
% 4 states (x): 
%
% 1 inputs: (u)
% -------------------------------------------------------------------------
% Simulating the continuous time system
% -------------------------------------------------------------------------
% Repeat application of Euler method sampled at Ts/M.
Ts = 0.01;
% M = 10;
% delta = Ts/M;
% xk1 = xk;
% for ct=1:M
%     xk1 = xk1 + delta*dynamics(xk1,uk);
% end

[t,xk] = simulate_cont(uk,xk,[0 Ts]);
xk1 = xk(end,:)';
% Note that we choose the Euler method (first oder Runge-Kutta method)
% because it is more efficient for plant with non-stiff ODEs.  You can
% choose other ODE solvers such as ode23, ode45 for better accuracy or
% ode15s and ode23s for stiff ODEs.  Those solvers are available from
% MATLAB.
end

function [f] = dynamics(x, u)
%% Continuous-time nonlinear dynamic model of a pendulum on a cart
%
% 4 states (x): 
% 
% 
% 
% 
% 
% 1 inputs: (u)
%   
%
%
% dxdt is the derivative of the states.
% [A B C D] are state space matrices linearized at the current operating point.
%
wn=sqrt(1000); % resonant frequency
zeta=1/sqrt(2); % damping coefficient
beta=1; % constant >0
x2_c=0; % pressure constant
%% Continous time state-space model of the Moore-Greitzer compressor model
f = x;
f(1) = -x(2)+x2_c+1+3*(x(1)/2)-(x(1)^3/2); % mass flow rate
f(2) = (x(1)+1-x(3)*sqrt(x(2)))/(beta^2); % pressure rise rate
f(3) = x(4); % throttle opening rate
f(4) = -wn^2*x(3)-2*zeta*wn*x(4)+wn^2*u; % throttle opening acceleration

end

% -------------------------------------------------------------------------
% Simulating the continuous time system /w ODE solvers
% -------------------------------------------------------------------------
function [t, y] = simulate_cont(u, x0, tt)
    [t, y] = ode(@(t, x)rhs(t, x, u), tt, x0);
end

function f = rhs(t, x, u)
%     wn=sqrt(1000); % resonant frequency
%     zeta=1/sqrt(2); % damping coefficient
%     beta=1; % constant >0
%     x2_c=0; % pressure constant
%     x1=x(1); x2=x(2); x3=x(3); x4=x(4);
%     f = x;
%     f(1) = -x2+x2_c+1+3*(x1/2)-(x1^3/2); % mass flow rate
%     f(2) = (x1+1-x3*sqrt(x2))/(beta^2);  % pressure rise rate
%     f(3) = x4;                           % throttle opening rate
%     f(4) = -wn^2*x3-2*zeta*wn*x4+wn^2*u; % throttle opening acceleration
    f = dynamics(x,u);
end

